services:
  acore-postgres:
    image: postgres:latest
    container_name: acore-postgres
    hostname: acore-postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_NAME}
    ports:
      - "${PG_HOST_PORT}:${PG_CONT_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}", "-d", "${PG_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - acore_net

  acore-redis:
    image: redis:alpine
    container_name: acore-redis
    env_file: .env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_HOST_PORT}:${REDIS_CONTAINER_PORT}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - acore_net

  acore-blue:
    build: .
    image: "${APP_NAME}:${COMMIT}"
    env_file: .env
    container_name: "${APP_NAME}-blue"
    environment:
      - APP_NAME=${APP_NAME}-blue
      - COMMIT=${COMMIT}
      - DEPLOY_COLOR=blue
      - PG_URL="${PG_URL}"
    ports:
      - "${APP_BLUE_HOST_PORT}:${APP_CONTAINER_PORT}"
    depends_on:
      acore-redis:
        condition: service_healthy
      acore-postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # staging on HTTP
      - "traefik.http.routers.${APP_NAME}-staging.rule=Host(`${APP_DOMAIN_STAGING}`)"
      - "traefik.http.routers.${APP_NAME}-staging.entrypoints=websecure"
      - "traefik.http.routers.${APP_NAME}-staging.tls=true"
      # production on HTTPS
      - "traefik.http.routers.${APP_NAME}-prod.rule=Host(`${APP_DOMAIN_PROD}`)"
      - "traefik.http.routers.${APP_NAME}-prod.entrypoints=websecure"
      - "traefik.http.routers.${APP_NAME}-prod.tls=true"
      - ${APP_TLS_CERTRESOLVER_LABEL}
      # common service settings
      - "traefik.http.services.${APP_NAME}.loadbalancer.server.port=${APP_CONTAINER_PORT}"
      - "traefik.http.services.${APP_NAME}.loadbalancer.healthcheck.path=${APP_HEALTHCHECK_PATH}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${APP_CONTAINER_PORT}"]
      interval: ${APP_HEALTHCHECK_INTERVAL}
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - acore_net

  acore-green:
    build: .
    image: "${APP_NAME}:${COMMIT}"
    env_file: .env
    container_name: "${APP_NAME}-green"
    environment:
      - APP_NAME=${APP_NAME}-green
      - COMMIT=${COMMIT}
      - DEPLOY_COLOR=green
      - PG_URL="${PG_URL}"
    ports:
      - "${APP_GREEN_HOST_PORT}:${APP_CONTAINER_PORT}"
    depends_on:
      acore-redis:
        condition: service_healthy
      acore-postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}-staging.rule=Host(`${APP_DOMAIN_STAGING}`)"
      - "traefik.http.routers.${APP_NAME}-staging.entrypoints=websecure"
      - "traefik.http.routers.${APP_NAME}-staging.tls=true"
      - "traefik.http.routers.${APP_NAME}-prod.rule=Host(`${APP_DOMAIN_PROD}`)"
      - "traefik.http.routers.${APP_NAME}-prod.entrypoints=websecure"
      - "traefik.http.routers.${APP_NAME}-prod.tls=true"
      - ${APP_TLS_CERTRESOLVER_LABEL}
      - "traefik.http.services.${APP_NAME}.loadbalancer.server.port=${APP_CONTAINER_PORT}"
      - "traefik.http.services.${APP_NAME}.loadbalancer.healthcheck.path=${APP_HEALTHCHECK_PATH}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${APP_CONTAINER_PORT}"]
      interval: ${APP_HEALTHCHECK_INTERVAL}
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - acore_net

  acore-traefik:
    image: traefik:latest
    container_name: acore-traefik
    restart: unless-stopped
    env_file: .env
    command: >
      traefik
      --log.level=DEBUG
      --api.dashboard=true
      --api.insecure=${TRAEFIK_API_INSECURE}
      --providers.docker=true
      --providers.docker.exposedbydefault=false
      --entrypoints.traefik.address=:${TRAEFIK_DASHBOARD_PORT}
      --entrypoints.web.address=:${TRAEFIK_HTTP_CONTAINER_PORT}
      --entrypoints.websecure.address=:${TRAEFIK_HTTPS_CONTAINER_PORT}
      ${TRAEFIK_CERTIFICATES_RESOLVER}
      ${TRAEFIK_FILE_PROVIDER}
    ports:
      - "${TRAEFIK_HTTP_HOST_PORT}:${TRAEFIK_HTTP_CONTAINER_PORT}"
      - "${TRAEFIK_HTTPS_HOST_PORT}:${TRAEFIK_HTTPS_CONTAINER_PORT}"
      - "${TRAEFIK_DASHBOARD_PORT}:${TRAEFIK_DASHBOARD_PORT}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./certs:/certs"
      - acme:/acme
    depends_on:
      acore-redis:
        condition: service_healthy
      acore-postgres:
        condition: service_healthy
    networks:
      - acore_net

  acore-grafana:
    image: grafana/grafana:latest
    container_name: acore-grafana
    env_file: .env
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "${GRAFANA_HOST_PORT}:${GRAFANA_CONTAINER_PORT}"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      acore-redis:
        condition: service_healthy
      acore-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${GRAFANA_CONTAINER_PORT}/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - acore_net

  acore-migrate:
    image: migrate/migrate:latest
    container_name: acore-migrate
    env_file: .env
    profiles: ["migrate"]
    depends_on:
      acore-postgres:
        condition: service_healthy
      acore-redis:
        condition: service_healthy
    volumes:
      - ./database/migrations:/migrations:ro
    command:
      - "-path"
      - "/migrations"
      - "-database"
      - "${PG_URL}"
      - "up"
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:${TRAEFIK_DASHBOARD_PORT}/ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - acore_net
    restart: "no"

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  acme:

networks:
  acore_net:
    name: acore_net
    driver: bridge
